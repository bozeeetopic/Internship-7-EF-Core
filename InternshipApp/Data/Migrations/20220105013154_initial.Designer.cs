// <auto-generated />
using System;
using Data.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(InternshipAppDbContext))]
    [Migration("20220105013154_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Data.Entities.Models.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReputationPoints")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Members");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Ivo",
                            Password = "",
                            ReputationPoints = 1000000,
                            Surname = "Sanader",
                            Username = "HDZ"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Marjan",
                            Password = "",
                            ReputationPoints = 10000,
                            Surname = "Marjanovic",
                            Username = "asdasd"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Ivo",
                            Password = "",
                            ReputationPoints = 1,
                            Surname = "Ivic",
                            Username = "asfffassf"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Pero",
                            Password = "",
                            ReputationPoints = 1,
                            Surname = "Peric",
                            Username = "sd"
                        });
                });

            modelBuilder.Entity("Data.Entities.Models.Perceive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PerceiverId")
                        .HasColumnType("int");

                    b.Property<int>("ResourceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PerceiverId");

                    b.HasIndex("ResourceId");

                    b.ToTable("Perceptions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PerceiverId = 1,
                            ResourceId = 1
                        },
                        new
                        {
                            Id = 2,
                            PerceiverId = 1,
                            ResourceId = 2
                        },
                        new
                        {
                            Id = 3,
                            PerceiverId = 1,
                            ResourceId = 3
                        });
                });

            modelBuilder.Entity("Data.Entities.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DownVotes")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UpVotes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Posts");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Post");
                });

            modelBuilder.Entity("Data.Entities.Models.Reaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsUpVote")
                        .HasColumnType("bit");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("ReactorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("ReactorId");

                    b.ToTable("Reactions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsUpVote = true,
                            PostId = 1,
                            ReactorId = 1
                        },
                        new
                        {
                            Id = 2,
                            IsUpVote = true,
                            PostId = 2,
                            ReactorId = 1
                        },
                        new
                        {
                            Id = 3,
                            IsUpVote = true,
                            PostId = 3,
                            ReactorId = 1
                        },
                        new
                        {
                            Id = 4,
                            IsUpVote = true,
                            PostId = 4,
                            ReactorId = 1
                        });
                });

            modelBuilder.Entity("Data.Entities.Models.Comment", b =>
                {
                    b.HasBaseType("Data.Entities.Models.Post");

                    b.Property<int?>("CommentId")
                        .HasColumnType("int");

                    b.Property<int>("ResourceId")
                        .HasColumnType("int");

                    b.HasIndex("CommentId");

                    b.HasIndex("ResourceId");

                    b.HasDiscriminator().HasValue("Comment");

                    b.HasData(
                        new
                        {
                            Id = 4,
                            AuthorId = 1,
                            Date = new DateTime(2020, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DownVotes = 1,
                            Text = "Hehehehehehehehehehe",
                            UpVotes = 3,
                            ResourceId = 1
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 2,
                            Date = new DateTime(2020, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DownVotes = 1,
                            Text = "Hehehehehehehehehehe",
                            UpVotes = 3,
                            CommentId = 4,
                            ResourceId = 1
                        },
                        new
                        {
                            Id = 6,
                            AuthorId = 3,
                            Date = new DateTime(2020, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DownVotes = 1,
                            Text = "Hehehehehehehehehehe",
                            UpVotes = 3,
                            CommentId = 5,
                            ResourceId = 1
                        },
                        new
                        {
                            Id = 7,
                            AuthorId = 1,
                            Date = new DateTime(2020, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DownVotes = 1,
                            Text = "hohohohohoho",
                            UpVotes = 3,
                            ResourceId = 2
                        });
                });

            modelBuilder.Entity("Data.Entities.Models.Resource", b =>
                {
                    b.HasBaseType("Data.Entities.Models.Post");

                    b.Property<int>("Domain")
                        .HasColumnType("int");

                    b.Property<string>("Header")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeenCounter")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Resource");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            Date = new DateTime(2020, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DownVotes = 1,
                            Text = "Hehehehehehehehehehe",
                            UpVotes = 3,
                            Domain = 4,
                            Header = "Hehe",
                            SeenCounter = 4
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 1,
                            Date = new DateTime(2020, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DownVotes = 1,
                            Text = "hohohohhohohohohohohoho",
                            UpVotes = 3,
                            Domain = 4,
                            Header = "Hoho",
                            SeenCounter = 4
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 2,
                            Date = new DateTime(2020, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DownVotes = 1,
                            Text = "Lorem ipsum or sumtin",
                            UpVotes = 3,
                            Domain = 3,
                            Header = "Nešto smisleno",
                            SeenCounter = 4
                        });
                });

            modelBuilder.Entity("Data.Entities.Models.Perceive", b =>
                {
                    b.HasOne("Data.Entities.Models.Member", "Perceiver")
                        .WithMany("Perceptions")
                        .HasForeignKey("PerceiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Data.Entities.Models.Resource", "Resource")
                        .WithMany("Perceptions")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Perceiver");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("Data.Entities.Models.Post", b =>
                {
                    b.HasOne("Data.Entities.Models.Member", "Author")
                        .WithMany("Posts")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Data.Entities.Models.Reaction", b =>
                {
                    b.HasOne("Data.Entities.Models.Post", "Post")
                        .WithMany("Reactions")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Data.Entities.Models.Member", "Reactor")
                        .WithMany("Reactions")
                        .HasForeignKey("ReactorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Reactor");
                });

            modelBuilder.Entity("Data.Entities.Models.Comment", b =>
                {
                    b.HasOne("Data.Entities.Models.Comment", "ParentComment")
                        .WithMany("Comments")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Data.Entities.Models.Resource", "Resource")
                        .WithMany("Comments")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ParentComment");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("Data.Entities.Models.Member", b =>
                {
                    b.Navigation("Perceptions");

                    b.Navigation("Posts");

                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("Data.Entities.Models.Post", b =>
                {
                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("Data.Entities.Models.Comment", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Data.Entities.Models.Resource", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Perceptions");
                });
#pragma warning restore 612, 618
        }
    }
}
